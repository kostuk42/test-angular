{"ast":null,"code":"import { EventModalComponent } from \"../event-modal/event-modal.component\";\nimport { take } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/calendar.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/material/datepicker\";\nimport * as i4 from \"../scheduler/scheduler.component\";\nconst _c0 = [\"calendar\"];\nexport let CalendarComponent = /*#__PURE__*/(() => {\n  class CalendarComponent {\n    constructor(calendarService, dialog) {\n      this.calendarService = calendarService;\n      this.dialog = dialog;\n      this.currentDate = new Date();\n    }\n\n    dateChanged(e) {\n      this.currentDate = e;\n    }\n\n    ngOnInit() {\n      this.selectedDate = new Date();\n\n      if (!this.sub) {\n        this.calendarService.updateEvents$.subscribe(() => this.updateCalendar());\n      }\n    }\n\n    onEventChanged(events) {\n      events.forEach(e => {\n        this.calendarService.totalEvents = this.calendarService.totalEvents.map(totalEvent => totalEvent.id === e.id ? e : totalEvent);\n      });\n    }\n\n    updateCalendar() {\n      this.calendar.updateTodaysDate();\n    }\n\n    dateClass() {\n      return date => {\n        const month = date.getMonth();\n        const day = date.getDate();\n        let isEvent;\n        this.calendarService.totalEvents.forEach(e => {\n          const eventMonth = e.time.getMonth();\n          const eventDay = e.time.getDate();\n\n          if (eventMonth === month && eventDay === day) {\n            isEvent = true;\n          }\n        });\n        return isEvent ? 'highlight' : '';\n      };\n    }\n\n    addEvent() {\n      this.dialog.open(EventModalComponent, {\n        data: {\n          date: this.currentDate\n        }\n      }).afterClosed().pipe(take(1)).subscribe(event => {\n        if (event) {\n          this.calendarService.totalEvents.push(event);\n          this.calendarService.updateEvents$.next(null);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n    }\n\n  }\n\n  CalendarComponent.ɵfac = function CalendarComponent_Factory(t) {\n    return new (t || CalendarComponent)(i0.ɵɵdirectiveInject(i1.CalendarService), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n\n  CalendarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalendarComponent,\n    selectors: [[\"app-calendar\"]],\n    viewQuery: function CalendarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendar = _t.first);\n      }\n    },\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"calendar-wrapper\"], [1, \"calendar\"], [3, \"dateClass\", \"selected\", \"selectedChange\"], [\"calendar\", \"\"], [1, \"add-event\", 3, \"click\"], [1, \"scheduler\", 3, \"schedulingDate\", \"eventsChanged\"]],\n    template: function CalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"mat-calendar\", 2, 3);\n        i0.ɵɵlistener(\"selectedChange\", function CalendarComponent_Template_mat_calendar_selectedChange_2_listener($event) {\n          return ctx.dateChanged($event);\n        })(\"selectedChange\", function CalendarComponent_Template_mat_calendar_selectedChange_2_listener($event) {\n          return ctx.selectedDate = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_4_listener() {\n          return ctx.addEvent();\n        });\n        i0.ɵɵtext(5, \" Add event \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"app-scheduler\", 5);\n        i0.ɵɵlistener(\"eventsChanged\", function CalendarComponent_Template_app_scheduler_eventsChanged_6_listener($event) {\n          return ctx.onEventChanged($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dateClass\", ctx.dateClass())(\"selected\", ctx.selectedDate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"schedulingDate\", ctx.currentDate);\n      }\n    },\n    directives: [i3.MatCalendar, i4.SchedulerComponent],\n    styles: [\".calendar-wrapper[_ngcontent-%COMP%]{width:100%;display:flex}.calendar[_ngcontent-%COMP%]{width:30%}.scheduler[_ngcontent-%COMP%]{width:60%}.time-range[_ngcontent-%COMP%]{width:20%;color:#ff0}.add-event[_ngcontent-%COMP%]{width:100%;height:30px;color:#fff;background-color:green;border:0;border-radius:4px}app-scheduler[_ngcontent-%COMP%]{margin-top:20px;margin-left:20px}\"]\n  });\n  return CalendarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}